#!/usr/bin/env node
'use strict';

require('babel-polyfill');

require('colors');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _pug = require('pug');

var _pug2 = _interopRequireDefault(_pug);

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _globWatcher = require('glob-watcher');

var _globWatcher2 = _interopRequireDefault(_globWatcher);

var _package = require('../package.json');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var amdWrapper = 'define(function (require, exports, module) {[func] return tpl})';
var log = console.log;

var pugPath = void 0;

_commander2.default.version(_package.version).usage('<path> [options]').arguments('<path>').option('-f, --out-file <path>', '输出文件到指定路径').option('-d, --out-dir <path>', '输出目录到指定目录').option('    --nocompress', '不压缩代码').option('-w, --watch', '监视文件变动').action(function (p) {
  pugPath = p;
  _isFile(p) ? _doFile(p) : _doDir(p);
}).parse(process.argv);

function _doFile(p) {
  var ext = _path2.default.extname(p);
  var basename = _path2.default.basename(p);

  var output = _commander2.default.outFile || p.replace(ext, '.js');

  if (!_path2.default.extname(output)) {
    output = _path2.default.join(output, basename.replace(ext, '.js'));
  }

  if (_commander2.default.watch) {
    (0, _globWatcher2.default)(p).on('change', function (p) {
      _compile(p, output);
    });

    log(['正在监视 ' + p + '! `Ctrl + C` 停止!', 'Watching ' + p + '! Use `Ctrl + C` to stop!'].join('\n').yellow);
  }

  _compile(p, output);
}

function _doDir(p) {
  var pattern = _path2.default.join(p, '**/*.pug');
  var outDir = _commander2.default.outDir;

  var formatOutputUrl = function formatOutputUrl(file) {
    var output = void 0;

    if (outDir && pugPath !== outDir) {
      output = file.replace(pugPath, outDir).replace('pug', 'js');
    } else {
      output = file.replace('pug', 'js');
    }

    return output;
  };

  if (_commander2.default.watch) {
    var handle = function handle(file) {
      _compile(file, formatOutputUrl(file));
    };

    (0, _globWatcher2.default)(pattern).on('add', handle).on('change', handle);

    log(['正在监视 ' + p + '! `Ctrl + C` 停止!', 'Watching ' + p + '! Use `Ctrl + C` to stop!'].join('\n').yellow);
  }

  (0, _glob2.default)(pattern, null, function (e, files) {
    if (e) {
      log(e.message.red);
    } else {
      files.forEach(function (file) {

        _compile(file, formatOutputUrl(file));
      });
    }
  });
}

function _isFile(file) {
  try {
    return _fs2.default.statSync(file).isFile();
  } catch (e) {
    log(e.message.red);
  }
}

function _isPugFile(file) {
  return _path2.default.extname(file) === '.pug';
}

function _compile(file, output) {
  if (_isPugFile(file)) {
    var compiledStr = _pug2.default.compileFileClient(file, {
      pretty: !_commander2.default.nocompress,
      debug: false,
      compileDebug: false,
      name: 'tpl'
    });

    _fsExtra2.default.outputFileSync(output, amdWrapper.replace('[func]', compiledStr), 'utf8');

    log(['compiled:'.cyan, file, '=>', _path2.default.relative(process.cwd(), output).magenta, new Date().toLocaleString()].join(' '));
  }
}

if (!pugPath) {
  log(['Nothing to do! You can use `p2a -h` to check usage', '什么都没有发生! 请使用命令`p2a -h`查看用法'].join('\n').yellow);
}